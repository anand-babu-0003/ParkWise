/**
 * @fileoverview Firestore Security Rules for Smart Parking System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and restricts administrative data modifications to backend processes. Data validation is relaxed for rapid prototyping, focusing on authorization and relational integrity.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the authenticated user.
 * - /parking_lots/{parkingLotId}: Parking lot data, managed by admins (via backend).
 * - /parking_lots/{parkingLotId}/slots/{slotId}: Parking slots within lots, managed by admins (via backend).
 * - /bookings/{bookingId}: Booking information, readable by the associated user.
 * - /payments/{paymentId}: Payment transactions, managed by backend processes.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed due to the path-based ownership model.
 * - Payments collection is designed for backend-only access.
 * - Data validation is minimal, focusing on authorization and critical relationships.
 *
 * Denormalization for Authorization:
 * - The 'Slot' entity includes 'lotId' to simplify slot management rules under a parking lot.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages parking lot data.
     * @path /parking_lots/{parkingLotId}
     * @allow (get, list) - Public read access to parking lot data.
     * @deny (create, update, delete) - Only backend processes can create, update, or delete parking lots.
     * @principle Restricts parking lot management to backend.
     */
    match /parking_lots/{parkingLotId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // Parking Lots managed by backend
      allow update: if false; // Parking Lots managed by backend
      allow delete: if false; // Parking Lots managed by backend
    }

    /**
     * @description Manages parking slot data within a parking lot.
     * @path /parking_lots/{parkingLotId}/slots/{slotId}
     * @allow (get, list) - Public read access to parking slot data.
     * @deny (create, update, delete) - Only backend processes can create, update, or delete parking slots.
     * @principle Restricts parking slot management to backend.
     */
    match /parking_lots/{parkingLotId}/slots/{slotId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // Slots managed by backend
      allow update: if false; // Slots managed by backend
      allow delete: if false; // Slots managed by backend
    }

    /**
     * @description Protects booking data, ensuring users can only access their own bookings.
     * @path /bookings/{bookingId}
     * @allow (get) - Authenticated user can read their own booking.
     * @allow (list) - No listing permitted
     * @deny (create, update, delete) - No user create, update, or delete.  Backend only.
     * @principle Enforces booking ownership.
     */
    match /bookings/{bookingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(bookingId) {
          return request.auth.uid == resource.data.userId;
        }

        // NOTE: Cannot validate resource.data.userId on a `list` operation.
        allow get: if isSignedIn() && resource.data.userId == request.auth.uid; // Allow anyone signed in to see the booking, assume backend filtering
        allow list: if false;
        allow create: if false; // Bookings managed by backend
        allow update: if false; // Bookings managed by backend
        allow delete: if false; // Bookings managed by backend
    }

    /**
     * @description Restricts access to payment data.
     * @path /payments/{paymentId}
     * @deny (all) - Payments are managed by backend processes only.
     * @principle Restricts payment management to backend.
     */
    match /payments/{paymentId} {
      allow get: if false; // Payments managed by backend
      allow list: if false; // Payments managed by backend
      allow create: if false; // Payments managed by backend
      allow update: if false; // Payments managed by backend
      allow delete: if false; // Payments managed by backend
    }
  }
}