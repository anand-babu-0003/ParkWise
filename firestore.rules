/**
 * @fileoverview Firestore Security Rules for Smart Parking System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and bookings,
 * with administrative privileges to manage parking lots and slots.  It leverages
 * Firebase Authentication to verify user identity and roles. Data validation is
 * relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /parking_lots/{parkingLotId}: Parking lot data, managed by admins.
 * - /parking_lots/{parkingLotId}/slots/{slotId}: Parking slot data, managed by admins.
 * - /bookings/{bookingId}: Booking data, owned by users.
 * - /payments/{paymentId}: Payment data, managed by Cloud Functions.
 *
 * Key Security Decisions:
 * - Admins have full access to parking lots and slots. Admin status is determined
 *   by the `isAdmin()` function, which currently defaults to allowing all users,
 *   but should be updated to retrieve the role from the user document.
 * - Users can only read and write their own profile data.
 * - Users can create bookings, but updates and deletes are restricted.
 * - Payments are managed by Cloud Functions and are not directly accessible to users.
 * - Listing of parking lots is public.
 * - Listing of bookings is not allowed to client-side for all users.
 *
 * Denormalization for Authorization:
 * - The current ruleset uses the `userId` parameter in the `/users/{userId}` path to
 *   enforce ownership, avoiding the need for `get()` calls. Similarly, slot and parking lot IDs
 *   in nested paths ensure that access can be validated without additional reads.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated `/users/{userId}` collection to enforce
 *   private access and simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile with matching ID.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read user profile data with ID 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Allow the user to read their own profile data.
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;

      // Allow the user to create their own profile, enforcing ID consistency.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to update their own profile.
      allow update: if isOwner(userId) && resource.data.id == userId;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Controls access to parking lot data.
     * @path /parking_lots/{parkingLotId}
     * @allow (create) Admin can create parking lots.
     * @allow (get) Any user can read parking lot data.
     * @allow (update) Admin can update parking lots.
     * @allow (delete) Admin can delete parking lots.
     * @deny (create) Non-admin users cannot create parking lots.
     * @deny (update) Non-admin users cannot update parking lots.
     * @principle Restricts parking lot management to administrators.
     */
    match /parking_lots/{parkingLotId} {
      // Allow anyone to read parking lot data.
      allow get, list: if true;

      // Only admins can create, update, or delete parking lots.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to parking slot data within a specific parking lot.
     * @path /parking_lots/{parkingLotId}/slots/{slotId}
     * @allow (create) Admin can create parking slots.
     * @allow (get) Any user can read parking slot data.
     * @allow (update) Admin can update parking slots.
     * @allow (delete) Admin can delete parking slots.
     * @deny (create) Non-admin users cannot create parking slots.
     * @deny (update) Non-admin users cannot update parking slots.
     * @principle Restricts parking slot management to administrators.
     */
    match /parking_lots/{parkingLotId}/slots/{slotId} {
      // Allow anyone to read parking slot data.
      allow get, list: if true;

      // Only admins can create, update, or delete parking slots.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to booking data.
     * @path /bookings/{bookingId}
     * @allow (create) User can create a booking with their user ID.
     * @allow (get) User can read their own bookings.
     * @deny (create) User cannot create a booking for another user.
     * @deny (get) User cannot read bookings made by other users.
     * @principle Enforces booking ownership and prevents unauthorized access.
     */
    match /bookings/{bookingId} {
      // Allow users to read their own bookings.
      allow get: if isBookingOwner(resource.data.userId) || isAdmin();
      allow list: if false;

      // Allow users to create bookings for themselves, enforcing userId consistency.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Allow user to update their own booking.
      allow update: if isBookingOwner(resource.data.userId) && resource != null;

      // Allow user to delete their own booking.
      allow delete: if isBookingOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to payment data.  Payments are managed by Cloud Functions, not directly by users.
     * @path /payments/{paymentId}
     * @allow (get) No user can read payment data directly.
     * @allow (create) Only authenticated services with appropriate permissions can create payments.
     * @deny (create) Users cannot directly create payment records.
     * @principle Restricts payment management to backend services.
     */
    match /payments/{paymentId} {
      // No direct access to payments for regular users.
      allow get, list: if false;

      // Payments are created by backend functions, so no direct client creation.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is the owner of the booking.
    function isBookingOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is an existing owner and the resource exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Checks if the user has the admin role.
    // TODO: Replace with a proper check against user document after a proper user onboarding.
    function isAdmin() {
      return true;
    }
  }
}